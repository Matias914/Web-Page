// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: roles.sql

package sqlc

import (
	"context"
	"time"
)

const addRole = `-- name: AddRole :one
INSERT INTO roles (movie_id, celebrity_id, role)
VALUES ($1, $2, $3)
RETURNING movie_id, celebrity_id, role
`

type AddRoleParams struct {
	MovieID     int64  `json:"movie_id"`
	CelebrityID int64  `json:"celebrity_id"`
	Role        string `json:"role"`
}

func (q *Queries) AddRole(ctx context.Context, arg AddRoleParams) (Role, error) {
	row := q.db.QueryRowContext(ctx, addRole, arg.MovieID, arg.CelebrityID, arg.Role)
	var i Role
	err := row.Scan(&i.MovieID, &i.CelebrityID, &i.Role)
	return i, err
}

const deleteRoleByMovieId = `-- name: DeleteRoleByMovieId :exec
DELETE FROM roles
WHERE movie_id = $1 AND celebrity_id = $2
`

type DeleteRoleByMovieIdParams struct {
	MovieID     int64 `json:"movie_id"`
	CelebrityID int64 `json:"celebrity_id"`
}

func (q *Queries) DeleteRoleByMovieId(ctx context.Context, arg DeleteRoleByMovieIdParams) error {
	_, err := q.db.ExecContext(ctx, deleteRoleByMovieId, arg.MovieID, arg.CelebrityID)
	return err
}

const getRoleByMovieId = `-- name: GetRoleByMovieId :one
SELECT movie_id, celebrity_id, role
FROM roles
WHERE movie_id = $1 AND celebrity_id = $2
`

type GetRoleByMovieIdParams struct {
	MovieID     int64 `json:"movie_id"`
	CelebrityID int64 `json:"celebrity_id"`
}

func (q *Queries) GetRoleByMovieId(ctx context.Context, arg GetRoleByMovieIdParams) (Role, error) {
	row := q.db.QueryRowContext(ctx, getRoleByMovieId, arg.MovieID, arg.CelebrityID)
	var i Role
	err := row.Scan(&i.MovieID, &i.CelebrityID, &i.Role)
	return i, err
}

const listCelebritiesFromMovieId = `-- name: ListCelebritiesFromMovieId :many
SELECT movie_id, celebrity_id, role, id, name, birth_date
FROM roles AS rol
JOIN celebrities AS cel
ON (cel.id = rol.celebrity_id)
WHERE rol.movie_id = $1
ORDER BY cel.name
LIMIT $2
OFFSET $3
`

type ListCelebritiesFromMovieIdParams struct {
	MovieID int64 `json:"movie_id"`
	Limit   int32 `json:"limit"`
	Offset  int32 `json:"offset"`
}

type ListCelebritiesFromMovieIdRow struct {
	MovieID     int64     `json:"movie_id"`
	CelebrityID int64     `json:"celebrity_id"`
	Role        string    `json:"role"`
	ID          int64     `json:"id"`
	Name        string    `json:"name"`
	BirthDate   time.Time `json:"birth_date"`
}

func (q *Queries) ListCelebritiesFromMovieId(ctx context.Context, arg ListCelebritiesFromMovieIdParams) ([]ListCelebritiesFromMovieIdRow, error) {
	rows, err := q.db.QueryContext(ctx, listCelebritiesFromMovieId, arg.MovieID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListCelebritiesFromMovieIdRow
	for rows.Next() {
		var i ListCelebritiesFromMovieIdRow
		if err := rows.Scan(
			&i.MovieID,
			&i.CelebrityID,
			&i.Role,
			&i.ID,
			&i.Name,
			&i.BirthDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMoviesFromCelebrityId = `-- name: ListMoviesFromCelebrityId :many
SELECT movie_id, celebrity_id, role, id, title, synopsis, released_at, poster_url, duration_minutes
FROM roles AS rol
JOIN movies AS mov
ON (mov.id = rol.movie_id)
WHERE rol.celebrity_id = $1
ORDER BY mov.released_at DESC
LIMIT $2
OFFSET $3
`

type ListMoviesFromCelebrityIdParams struct {
	CelebrityID int64 `json:"celebrity_id"`
	Limit       int32 `json:"limit"`
	Offset      int32 `json:"offset"`
}

type ListMoviesFromCelebrityIdRow struct {
	MovieID         int64     `json:"movie_id"`
	CelebrityID     int64     `json:"celebrity_id"`
	Role            string    `json:"role"`
	ID              int64     `json:"id"`
	Title           string    `json:"title"`
	Synopsis        string    `json:"synopsis"`
	ReleasedAt      time.Time `json:"released_at"`
	PosterUrl       string    `json:"poster_url"`
	DurationMinutes int32     `json:"duration_minutes"`
}

func (q *Queries) ListMoviesFromCelebrityId(ctx context.Context, arg ListMoviesFromCelebrityIdParams) ([]ListMoviesFromCelebrityIdRow, error) {
	rows, err := q.db.QueryContext(ctx, listMoviesFromCelebrityId, arg.CelebrityID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListMoviesFromCelebrityIdRow
	for rows.Next() {
		var i ListMoviesFromCelebrityIdRow
		if err := rows.Scan(
			&i.MovieID,
			&i.CelebrityID,
			&i.Role,
			&i.ID,
			&i.Title,
			&i.Synopsis,
			&i.ReleasedAt,
			&i.PosterUrl,
			&i.DurationMinutes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

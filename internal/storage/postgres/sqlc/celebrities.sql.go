// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: celebrities.sql

package sqlc

import (
	"context"
	"time"
)

const addCelebrity = `-- name: AddCelebrity :one
INSERT INTO celebrities (name, birth_date)
VALUES ($1, $2)
RETURNING id, name, birth_date
`

type AddCelebrityParams struct {
	Name      string    `json:"name"`
	BirthDate time.Time `json:"birth_date"`
}

func (q *Queries) AddCelebrity(ctx context.Context, arg AddCelebrityParams) (Celebrity, error) {
	row := q.db.QueryRowContext(ctx, addCelebrity, arg.Name, arg.BirthDate)
	var i Celebrity
	err := row.Scan(&i.ID, &i.Name, &i.BirthDate)
	return i, err
}

const deleteCelebrityById = `-- name: DeleteCelebrityById :exec
DELETE FROM celebrities
WHERE id = $1
`

func (q *Queries) DeleteCelebrityById(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteCelebrityById, id)
	return err
}

const getCelebrityById = `-- name: GetCelebrityById :one
SELECT id, name, birth_date
FROM celebrities
WHERE id = $1
`

func (q *Queries) GetCelebrityById(ctx context.Context, id int64) (Celebrity, error) {
	row := q.db.QueryRowContext(ctx, getCelebrityById, id)
	var i Celebrity
	err := row.Scan(&i.ID, &i.Name, &i.BirthDate)
	return i, err
}

const listCelebrities = `-- name: ListCelebrities :many
SELECT id, name, birth_date
FROM celebrities
LIMIT $1
OFFSET $2
`

type ListCelebritiesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListCelebrities(ctx context.Context, arg ListCelebritiesParams) ([]Celebrity, error) {
	rows, err := q.db.QueryContext(ctx, listCelebrities, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Celebrity
	for rows.Next() {
		var i Celebrity
		if err := rows.Scan(&i.ID, &i.Name, &i.BirthDate); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCelebrityById = `-- name: UpdateCelebrityById :one
UPDATE celebrities
SET name = $2, birth_date = $3
WHERE id = $1
RETURNING id, name, birth_date
`

type UpdateCelebrityByIdParams struct {
	ID        int64     `json:"id"`
	Name      string    `json:"name"`
	BirthDate time.Time `json:"birth_date"`
}

func (q *Queries) UpdateCelebrityById(ctx context.Context, arg UpdateCelebrityByIdParams) (Celebrity, error) {
	row := q.db.QueryRowContext(ctx, updateCelebrityById, arg.ID, arg.Name, arg.BirthDate)
	var i Celebrity
	err := row.Scan(&i.ID, &i.Name, &i.BirthDate)
	return i, err
}

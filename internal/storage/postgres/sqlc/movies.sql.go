// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: movies.sql

package sqlc

import (
	"context"
	"database/sql"
)

const createMovie = `-- name: CreateMovie :one
INSERT INTO movies (title, director, release_year)
VALUES ($1, $2, $3)
RETURNING id, title, director, release_year, created_at
`

type CreateMovieParams struct {
	Title       string         `json:"title"`
	Director    sql.NullString `json:"director"`
	ReleaseYear sql.NullInt32  `json:"release_year"`
}

func (q *Queries) CreateMovie(ctx context.Context, arg CreateMovieParams) (Movie, error) {
	row := q.db.QueryRowContext(ctx, createMovie, arg.Title, arg.Director, arg.ReleaseYear)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Director,
		&i.ReleaseYear,
		&i.CreatedAt,
	)
	return i, err
}

const deleteMovie = `-- name: DeleteMovie :exec
DELETE FROM movies WHERE id = $1
`

func (q *Queries) DeleteMovie(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteMovie, id)
	return err
}

const getMovie = `-- name: GetMovie :one
SELECT id, title, director, release_year, created_at FROM movies WHERE id = $1
`

func (q *Queries) GetMovie(ctx context.Context, id int32) (Movie, error) {
	row := q.db.QueryRowContext(ctx, getMovie, id)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Director,
		&i.ReleaseYear,
		&i.CreatedAt,
	)
	return i, err
}

const listMovies = `-- name: ListMovies :many
SELECT id, title, director, release_year, created_at FROM movies ORDER BY created_at DESC
`

func (q *Queries) ListMovies(ctx context.Context) ([]Movie, error) {
	rows, err := q.db.QueryContext(ctx, listMovies)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Movie
	for rows.Next() {
		var i Movie
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Director,
			&i.ReleaseYear,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchMovies = `-- name: SearchMovies :many
SELECT id, title, director, release_year, created_at FROM movies
WHERE title ILIKE '%' || $1 || '%'
OR director ILIKE '%' || $1 || '%'
`

func (q *Queries) SearchMovies(ctx context.Context, dollar_1 sql.NullString) ([]Movie, error) {
	rows, err := q.db.QueryContext(ctx, searchMovies, dollar_1)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Movie
	for rows.Next() {
		var i Movie
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Director,
			&i.ReleaseYear,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMovie = `-- name: UpdateMovie :one
UPDATE movies
SET title = $1, director = $2, release_year = $3
WHERE id = $4
RETURNING id, title, director, release_year, created_at
`

type UpdateMovieParams struct {
	Title       string         `json:"title"`
	Director    sql.NullString `json:"director"`
	ReleaseYear sql.NullInt32  `json:"release_year"`
	ID          int32          `json:"id"`
}

func (q *Queries) UpdateMovie(ctx context.Context, arg UpdateMovieParams) (Movie, error) {
	row := q.db.QueryRowContext(ctx, updateMovie,
		arg.Title,
		arg.Director,
		arg.ReleaseYear,
		arg.ID,
	)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Director,
		&i.ReleaseYear,
		&i.CreatedAt,
	)
	return i, err
}

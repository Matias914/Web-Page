// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: movies.sql

package sqlc

import (
	"context"
	"time"
)

const addMovie = `-- name: AddMovie :one
INSERT INTO movies (title, synopsis, released_at, poster_url, duration_minutes)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, title, synopsis, released_at, poster_url, duration_minutes
`

type AddMovieParams struct {
	Title           string    `json:"title"`
	Synopsis        string    `json:"synopsis"`
	ReleasedAt      time.Time `json:"released_at"`
	PosterUrl       string    `json:"poster_url"`
	DurationMinutes int32     `json:"duration_minutes"`
}

func (q *Queries) AddMovie(ctx context.Context, arg AddMovieParams) (Movie, error) {
	row := q.db.QueryRowContext(ctx, addMovie,
		arg.Title,
		arg.Synopsis,
		arg.ReleasedAt,
		arg.PosterUrl,
		arg.DurationMinutes,
	)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Synopsis,
		&i.ReleasedAt,
		&i.PosterUrl,
		&i.DurationMinutes,
	)
	return i, err
}

const deleteMovieById = `-- name: DeleteMovieById :exec
DELETE FROM movies
WHERE id = $1
`

func (q *Queries) DeleteMovieById(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteMovieById, id)
	return err
}

const getMovieById = `-- name: GetMovieById :one
SELECT id, title, synopsis, released_at, poster_url, duration_minutes
FROM movies
WHERE id = $1
`

func (q *Queries) GetMovieById(ctx context.Context, id int64) (Movie, error) {
	row := q.db.QueryRowContext(ctx, getMovieById, id)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Synopsis,
		&i.ReleasedAt,
		&i.PosterUrl,
		&i.DurationMinutes,
	)
	return i, err
}

const listMoviesByReleaseDate = `-- name: ListMoviesByReleaseDate :many
SELECT id, title, synopsis, released_at, poster_url, duration_minutes
FROM movies
ORDER BY released_at DESC
LIMIT $1
OFFSET $2
`

type ListMoviesByReleaseDateParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListMoviesByReleaseDate(ctx context.Context, arg ListMoviesByReleaseDateParams) ([]Movie, error) {
	rows, err := q.db.QueryContext(ctx, listMoviesByReleaseDate, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Movie
	for rows.Next() {
		var i Movie
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Synopsis,
			&i.ReleasedAt,
			&i.PosterUrl,
			&i.DurationMinutes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMovieById = `-- name: UpdateMovieById :one
UPDATE movies
SET title = $2,
    synopsis = $3,
    released_at = $4,
    poster_url = $5,
    duration_minutes = $6
WHERE id = $1
RETURNING id, title, synopsis, released_at, poster_url, duration_minutes
`

type UpdateMovieByIdParams struct {
	ID              int64     `json:"id"`
	Title           string    `json:"title"`
	Synopsis        string    `json:"synopsis"`
	ReleasedAt      time.Time `json:"released_at"`
	PosterUrl       string    `json:"poster_url"`
	DurationMinutes int32     `json:"duration_minutes"`
}

func (q *Queries) UpdateMovieById(ctx context.Context, arg UpdateMovieByIdParams) (Movie, error) {
	row := q.db.QueryRowContext(ctx, updateMovieById,
		arg.ID,
		arg.Title,
		arg.Synopsis,
		arg.ReleasedAt,
		arg.PosterUrl,
		arg.DurationMinutes,
	)
	var i Movie
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Synopsis,
		&i.ReleasedAt,
		&i.PosterUrl,
		&i.DurationMinutes,
	)
	return i, err
}

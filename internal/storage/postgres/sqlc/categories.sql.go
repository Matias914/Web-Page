// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: categories.sql

package sqlc

import (
	"context"
	"time"
)

const addCategory = `-- name: AddCategory :one
INSERT INTO categories (genre_id, movie_id)
VALUES ($1, $2)
RETURNING genre_id, movie_id
`

type AddCategoryParams struct {
	GenreID int32 `json:"genre_id"`
	MovieID int64 `json:"movie_id"`
}

func (q *Queries) AddCategory(ctx context.Context, arg AddCategoryParams) (Category, error) {
	row := q.db.QueryRowContext(ctx, addCategory, arg.GenreID, arg.MovieID)
	var i Category
	err := row.Scan(&i.GenreID, &i.MovieID)
	return i, err
}

const deleteCategoryById = `-- name: DeleteCategoryById :exec
DELETE FROM categories
WHERE genre_id = $1 AND movie_id = $2
`

type DeleteCategoryByIdParams struct {
	GenreID int32 `json:"genre_id"`
	MovieID int64 `json:"movie_id"`
}

func (q *Queries) DeleteCategoryById(ctx context.Context, arg DeleteCategoryByIdParams) error {
	_, err := q.db.ExecContext(ctx, deleteCategoryById, arg.GenreID, arg.MovieID)
	return err
}

const getCategoryById = `-- name: GetCategoryById :one
SELECT genre_id, movie_id
FROM categories
WHERE genre_id = $1 AND movie_id = $2
`

type GetCategoryByIdParams struct {
	GenreID int32 `json:"genre_id"`
	MovieID int64 `json:"movie_id"`
}

func (q *Queries) GetCategoryById(ctx context.Context, arg GetCategoryByIdParams) (Category, error) {
	row := q.db.QueryRowContext(ctx, getCategoryById, arg.GenreID, arg.MovieID)
	var i Category
	err := row.Scan(&i.GenreID, &i.MovieID)
	return i, err
}

const listGenresByMovieId = `-- name: ListGenresByMovieId :many
SELECT genre_id, movie_id, id, name
FROM categories AS cat
JOIN genres AS gen
ON (cat.id = gen.genre_id)
WHERE cat.movie_id = $1
LIMIT $2
OFFSET $3
`

type ListGenresByMovieIdParams struct {
	MovieID int64 `json:"movie_id"`
	Limit   int32 `json:"limit"`
	Offset  int32 `json:"offset"`
}

type ListGenresByMovieIdRow struct {
	GenreID int32  `json:"genre_id"`
	MovieID int64  `json:"movie_id"`
	ID      int32  `json:"id"`
	Name    string `json:"name"`
}

func (q *Queries) ListGenresByMovieId(ctx context.Context, arg ListGenresByMovieIdParams) ([]ListGenresByMovieIdRow, error) {
	rows, err := q.db.QueryContext(ctx, listGenresByMovieId, arg.MovieID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListGenresByMovieIdRow
	for rows.Next() {
		var i ListGenresByMovieIdRow
		if err := rows.Scan(
			&i.GenreID,
			&i.MovieID,
			&i.ID,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listMoviesByGenreId = `-- name: ListMoviesByGenreId :many
SELECT genre_id, movie_id, id, title, synopsis, released_at, poster_url, duration_minutes
FROM categories AS cat
JOIN movies AS mov
ON (mov.id = cat.movie_id)
WHERE cat.genre_id = $1
LIMIT $2
OFFSET $3
`

type ListMoviesByGenreIdParams struct {
	GenreID int32 `json:"genre_id"`
	Limit   int32 `json:"limit"`
	Offset  int32 `json:"offset"`
}

type ListMoviesByGenreIdRow struct {
	GenreID         int32     `json:"genre_id"`
	MovieID         int64     `json:"movie_id"`
	ID              int64     `json:"id"`
	Title           string    `json:"title"`
	Synopsis        string    `json:"synopsis"`
	ReleasedAt      time.Time `json:"released_at"`
	PosterUrl       string    `json:"poster_url"`
	DurationMinutes int32     `json:"duration_minutes"`
}

func (q *Queries) ListMoviesByGenreId(ctx context.Context, arg ListMoviesByGenreIdParams) ([]ListMoviesByGenreIdRow, error) {
	rows, err := q.db.QueryContext(ctx, listMoviesByGenreId, arg.GenreID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListMoviesByGenreIdRow
	for rows.Next() {
		var i ListMoviesByGenreIdRow
		if err := rows.Scan(
			&i.GenreID,
			&i.MovieID,
			&i.ID,
			&i.Title,
			&i.Synopsis,
			&i.ReleasedAt,
			&i.PosterUrl,
			&i.DurationMinutes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCategoryById = `-- name: UpdateCategoryById :one
UPDATE categories
SET genre_id = $3, movie_id = $4
WHERE genre_id = $1 AND movie_id = $2
RETURNING genre_id, movie_id
`

type UpdateCategoryByIdParams struct {
	GenreID   int32 `json:"genre_id"`
	MovieID   int64 `json:"movie_id"`
	GenreID_2 int32 `json:"genre_id_2"`
	MovieID_2 int64 `json:"movie_id_2"`
}

func (q *Queries) UpdateCategoryById(ctx context.Context, arg UpdateCategoryByIdParams) (Category, error) {
	row := q.db.QueryRowContext(ctx, updateCategoryById,
		arg.GenreID,
		arg.MovieID,
		arg.GenreID_2,
		arg.MovieID_2,
	)
	var i Category
	err := row.Scan(&i.GenreID, &i.MovieID)
	return i, err
}

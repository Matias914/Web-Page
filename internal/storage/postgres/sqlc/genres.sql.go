// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: genres.sql

package sqlc

import (
	"context"
)

const addGenre = `-- name: AddGenre :one
INSERT INTO genres (name)
VALUES ($1)
RETURNING id, name
`

func (q *Queries) AddGenre(ctx context.Context, name string) (Genre, error) {
	row := q.db.QueryRowContext(ctx, addGenre, name)
	var i Genre
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const deleteGenreById = `-- name: DeleteGenreById :exec
DELETE FROM genres
WHERE id = $1
`

func (q *Queries) DeleteGenreById(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteGenreById, id)
	return err
}

const getGenreById = `-- name: GetGenreById :one
SELECT id, name
FROM genres
WHERE id = $1
`

func (q *Queries) GetGenreById(ctx context.Context, id int32) (Genre, error) {
	row := q.db.QueryRowContext(ctx, getGenreById, id)
	var i Genre
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const listGenres = `-- name: ListGenres :many
SELECT id, name
FROM genres
LIMIT $1
OFFSET $2
`

type ListGenresParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListGenres(ctx context.Context, arg ListGenresParams) ([]Genre, error) {
	rows, err := q.db.QueryContext(ctx, listGenres, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Genre
	for rows.Next() {
		var i Genre
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGenreById = `-- name: UpdateGenreById :one
UPDATE genres
SET name = $2
WHERE id = $1
RETURNING id, name
`

type UpdateGenreByIdParams struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
}

func (q *Queries) UpdateGenreById(ctx context.Context, arg UpdateGenreByIdParams) (Genre, error) {
	row := q.db.QueryRowContext(ctx, updateGenreById, arg.ID, arg.Name)
	var i Genre
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: reviews.sql

package sqlc

import (
	"context"
	"time"
)

const addReview = `-- name: AddReview :one
INSERT INTO reviews (user_id, movie_id, comment, created_at)
VALUES ($1, $2, $3, $4)
RETURNING user_id, movie_id, comment, created_at
`

type AddReviewParams struct {
	UserID    int64     `json:"user_id"`
	MovieID   int64     `json:"movie_id"`
	Comment   string    `json:"comment"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) AddReview(ctx context.Context, arg AddReviewParams) (Review, error) {
	row := q.db.QueryRowContext(ctx, addReview,
		arg.UserID,
		arg.MovieID,
		arg.Comment,
		arg.CreatedAt,
	)
	var i Review
	err := row.Scan(
		&i.UserID,
		&i.MovieID,
		&i.Comment,
		&i.CreatedAt,
	)
	return i, err
}

const deleteReview = `-- name: DeleteReview :exec
DELETE FROM reviews
WHERE user_id = $1 AND movie_id = $2
`

type DeleteReviewParams struct {
	UserID  int64 `json:"user_id"`
	MovieID int64 `json:"movie_id"`
}

func (q *Queries) DeleteReview(ctx context.Context, arg DeleteReviewParams) error {
	_, err := q.db.ExecContext(ctx, deleteReview, arg.UserID, arg.MovieID)
	return err
}

const getReview = `-- name: GetReview :one
SELECT user_id, movie_id, comment, created_at
FROM reviews
WHERE user_id = $1 AND movie_id = $2
`

type GetReviewParams struct {
	UserID  int64 `json:"user_id"`
	MovieID int64 `json:"movie_id"`
}

func (q *Queries) GetReview(ctx context.Context, arg GetReviewParams) (Review, error) {
	row := q.db.QueryRowContext(ctx, getReview, arg.UserID, arg.MovieID)
	var i Review
	err := row.Scan(
		&i.UserID,
		&i.MovieID,
		&i.Comment,
		&i.CreatedAt,
	)
	return i, err
}

const listMoviesReviewsFromUserId = `-- name: ListMoviesReviewsFromUserId :many
SELECT user_id, movie_id, comment, rev.created_at, id, username, password, mail, usr.created_at
FROM reviews AS rev
JOIN users AS usr
ON (rev.user_id = usr.id)
WHERE rev.movie_id = $1
LIMIT $2
OFFSET $3
`

type ListMoviesReviewsFromUserIdParams struct {
	MovieID int64 `json:"movie_id"`
	Limit   int32 `json:"limit"`
	Offset  int32 `json:"offset"`
}

type ListMoviesReviewsFromUserIdRow struct {
	UserID      int64     `json:"user_id"`
	MovieID     int64     `json:"movie_id"`
	Comment     string    `json:"comment"`
	CreatedAt   time.Time `json:"created_at"`
	ID          int64     `json:"id"`
	Username    string    `json:"username"`
	Password    string    `json:"password"`
	Mail        string    `json:"mail"`
	CreatedAt_2 time.Time `json:"created_at_2"`
}

func (q *Queries) ListMoviesReviewsFromUserId(ctx context.Context, arg ListMoviesReviewsFromUserIdParams) ([]ListMoviesReviewsFromUserIdRow, error) {
	rows, err := q.db.QueryContext(ctx, listMoviesReviewsFromUserId, arg.MovieID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListMoviesReviewsFromUserIdRow
	for rows.Next() {
		var i ListMoviesReviewsFromUserIdRow
		if err := rows.Scan(
			&i.UserID,
			&i.MovieID,
			&i.Comment,
			&i.CreatedAt,
			&i.ID,
			&i.Username,
			&i.Password,
			&i.Mail,
			&i.CreatedAt_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsersReviewsFromMovieId = `-- name: ListUsersReviewsFromMovieId :many
SELECT user_id, movie_id, comment, rev.created_at, id, username, password, mail, usr.created_at
FROM reviews AS rev
JOIN users AS usr
ON (rev.user_id = usr.id)
WHERE rev.movie_id = $1
LIMIT $2
OFFSET $3
`

type ListUsersReviewsFromMovieIdParams struct {
	MovieID int64 `json:"movie_id"`
	Limit   int32 `json:"limit"`
	Offset  int32 `json:"offset"`
}

type ListUsersReviewsFromMovieIdRow struct {
	UserID      int64     `json:"user_id"`
	MovieID     int64     `json:"movie_id"`
	Comment     string    `json:"comment"`
	CreatedAt   time.Time `json:"created_at"`
	ID          int64     `json:"id"`
	Username    string    `json:"username"`
	Password    string    `json:"password"`
	Mail        string    `json:"mail"`
	CreatedAt_2 time.Time `json:"created_at_2"`
}

func (q *Queries) ListUsersReviewsFromMovieId(ctx context.Context, arg ListUsersReviewsFromMovieIdParams) ([]ListUsersReviewsFromMovieIdRow, error) {
	rows, err := q.db.QueryContext(ctx, listUsersReviewsFromMovieId, arg.MovieID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListUsersReviewsFromMovieIdRow
	for rows.Next() {
		var i ListUsersReviewsFromMovieIdRow
		if err := rows.Scan(
			&i.UserID,
			&i.MovieID,
			&i.Comment,
			&i.CreatedAt,
			&i.ID,
			&i.Username,
			&i.Password,
			&i.Mail,
			&i.CreatedAt_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateReview = `-- name: UpdateReview :one
UPDATE reviews
SET comment = $3
WHERE user_id = $1 AND movie_id = $2
RETURNING user_id, movie_id, comment, created_at
`

type UpdateReviewParams struct {
	UserID  int64  `json:"user_id"`
	MovieID int64  `json:"movie_id"`
	Comment string `json:"comment"`
}

func (q *Queries) UpdateReview(ctx context.Context, arg UpdateReviewParams) (Review, error) {
	row := q.db.QueryRowContext(ctx, updateReview, arg.UserID, arg.MovieID, arg.Comment)
	var i Review
	err := row.Scan(
		&i.UserID,
		&i.MovieID,
		&i.Comment,
		&i.CreatedAt,
	)
	return i, err
}
